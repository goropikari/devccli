#!/bin/bash

set -eo pipefail
DEVCONTAINER_USER=vscode

if [[ ! -e ".devcontainer" ]]; then
  echo "this repository does not have devcontainer configuration file."
  exit 1
fi

# https://github.com/devcontainers/cli/issues/29
function devw() {
  devcontainer $1 --workspace-folder . "${@:2}"
}

function up () {
  local MOUNT_CURRENT_DIR
  MOUNT_CURRENT_DIR="true"
  if [[ "$1" = "true" || "$1" = "false" ]]; then
    MOUNT_CURRENT_DIR="$1"
    shift
  fi

  DEVCONTAINER_CONFIGRATION=$(devw read-configuration | tail -n 1)
  TARGET=$(
    echo ${DEVCONTAINER_CONFIGRATION} | \
    jq -r .workspace.workspaceFolder
  )

  # postCreateCommand で ssh が必要なものがあった場合エラーになってしまうので skip する必要がある
  local RESULT
  if [[ "${MOUNT_CURRENT_DIR}" = "true" ]]; then
    echo $(pwd)
    RESULT=$(
      devw up "$@" \
        --mount "type=bind,source=$(pwd),target=${TARGET}" | \
      tee /dev/tty | \
      tail -n 1
    )
  else
    RESULT=$(
      devw up "$@" | \
      tee /dev/tty | \
      tail -n 1
    )
  fi

  IS_COMPOSE=$(echo $RESULT | jq -r '.composeProjectName != null')
  TEMP_CONTAINER_CONFIGURAITON_LOG=/tmp/$(basename $(pwd))-$(pwd | sha1sum | awk '{printf $1}').log
  if [[ "${IS_COMPOSE}" = "true" ]]; then
    echo ${RESULT} | jq -r '.composeProjectName,.containerId' > ${TEMP_CONTAINER_CONFIGURAITON_LOG}
  else
    echo ${RESULT} | jq -r '.containerId' > ${TEMP_CONTAINER_CONFIGURAITON_LOG}
  fi
}

function exec_fn () {
  # default command is bash
  CONTAINER=$(devw up --expect-existing-container true --skip-post-create | tail -n 1 | jq -r .containerId)

  local SOCK_FILE
  local CONTAINER_SOCK
  local SSH_OPTION
  if [[ "$1" = "ssh" ]]; then
    shift
    CMD="${@:-bash}"
    # ssh auth socket を人力で bind mount する
    devw exec mkdir -p /home/${DEVCONTAINER_USER}/.ssh_sock
    SOCK_FILE=$(devw exec mktemp /home/${DEVCONTAINER_USER}/.ssh_sock/devcontainer-cli-ssh-sock-XXXXXXX)
    CONTAINER_SOCK=$(docker inspect ${CONTAINER} | jq -r .[].GraphDriver.Data.MergedDir)${SOCK_FILE}
    sudo mount --bind ${SSH_AUTH_SOCK} ${CONTAINER_SOCK}
    docker exec -it -u "$DEVCONTAINER_USER" -e SSH_AUTH_SOCK=$SOCK_FILE \
      -w $(devw read-configuration | tail -n1 | jq -r .workspace.workspaceFolder) \
      ${CONTAINER} bash -c "$CMD"
    sudo umount ${CONTAINER_SOCK}
    sudo rm -f ${CONTAINER_SOCK}
  else
    CMD="${@:-bash}"
    docker exec -it -u "$DEVCONTAINER_USER" \
      -w $(devw read-configuration | tail -n1 | jq -r .workspace.workspaceFolder) \
      ${CONTAINER} bash -c "$CMD"
  fi
  return $?
}

function stop () {
  TEMP_CONTAINER_CONFIGURAITON_LOG=/tmp/$(basename $(pwd))-$(pwd | sha1sum | awk '{printf $1}').log
  if [[ $(wc -l $TEMP_CONTAINER_CONFIGURAITON_LOG | cut -f1 -d' ') -eq 1 ]]; then
    local CONTAINER_ID
    CONTAINER_ID=$(head ${TEMP_CONTAINER_CONFIGURAITON_LOG})
    docker stop ${CONTAINER_ID}
  else
    local CONTAINER_PROJECT_NAME
    CONTAINER_PROJECT_NAME=$(head -n 1 ${TEMP_CONTAINER_CONFIGURAITON_LOG})
    docker stop $(docker ps -a -f name=${CONTAINER_PROJECT_NAME} -q)
  fi
  return $?
}

function down () {
  stop >> /dev/null

  TEMP_CONTAINER_CONFIGURAITON_LOG=/tmp/$(basename $(pwd))-$(pwd | sha1sum | awk '{printf $1}').log
  if [[ $(wc -l $TEMP_CONTAINER_CONFIGURAITON_LOG | cut -f1 -d' ') -eq 1 ]]; then
    local CONTAINER_ID
    CONTAINER_ID=$(head ${TEMP_CONTAINER_CONFIGURAITON_LOG})
    docker rm ${CONTAINER_ID}
  else
    local CONTAINER_PROJECT_NAME
    CONTAINER_PROJECT_NAME=$(head -n 1 ${TEMP_CONTAINER_CONFIGURAITON_LOG})
    docker rm $(docker ps -a -f name=${CONTAINER_PROJECT_NAME} -q)
  fi
  rm -f ${TEMP_CONTAINER_CONFIGURAITON_LOG}
}

function help () {
  echo "usage:"
  echo "  devc up [true] # if true, remove existing container"
  echo "  devc exec [cmd]"
  echo "  devc stop"
  echo "  devc down"
}

if [[ "$1" = "help" ]]; then
  help
elif [[ "$1" = "up" ]]; then
  shift
  up "$@"
elif [[ "$1" = "exec" ]]; then
  shift
  exec_fn "$@"
elif [[ "$1" = "stop" ]]; then
  stop
elif [[ "$1" = "down" ]]; then
  down
else
  devw "$@"
fi
